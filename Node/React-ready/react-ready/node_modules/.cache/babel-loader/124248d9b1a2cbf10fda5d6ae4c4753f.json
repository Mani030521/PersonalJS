{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M1047144\\\\Desktop\\\\Node\\\\React-ready\\\\react-ready\\\\src\\\\containers\\\\Dashboard\\\\Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DashboardWidgets from './DashboardWidgets';\nimport { dashboardActions } from '../../actions';\nimport { base } from '../../hocs';\n\nclass Dashboard extends React.Component {\n  async componentDidMount() {\n    this.props.showLoading();\n    this.props.getOrders().then(() => {\n      this.props.hideLoading();\n    }).catch(err => {\n      this.props.hideLoading();\n      this.props.showSnackBar('asda');\n    });\n  }\n\n  render() {\n    return React.createElement(DashboardWidgets, {\n      orders: this.props.orders,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  orders: state.dashboard.orders\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getOrders: () => {\n      return new Promise((res, rej) => {\n        if (dispatch(dashboardActions.getOrders())) {\n          res();\n        } else {\n          rej();\n        }\n      });\n    }\n  };\n};\n\nDashboard.propTypes = {\n  orders: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getOrders: PropTypes.func.isRequired,\n  showSnackBar: PropTypes.func.isRequired,\n  showLoading: PropTypes.func.isRequired,\n  hideLoading: PropTypes.func.isRequired\n};\nexport default base(connect(mapStateToProps, mapDispatchToProps)(Dashboard));","map":{"version":3,"sources":["C:/Users/M1047144/Desktop/Node/React-ready/react-ready/src/containers/Dashboard/Dashboard.js"],"names":["React","connect","PropTypes","DashboardWidgets","dashboardActions","base","Dashboard","Component","componentDidMount","props","showLoading","getOrders","then","hideLoading","catch","err","showSnackBar","render","orders","mapStateToProps","state","dashboard","mapDispatchToProps","dispatch","Promise","res","rej","propTypes","arrayOf","object","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,IAAT,QAAqB,YAArB;;AAEA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpC,QAAMC,iBAAN,GAA0B;AACtB,SAAKC,KAAL,CAAWC,WAAX;AACA,SAAKD,KAAL,CACKE,SADL,GAEKC,IAFL,CAEU,MAAM;AACR,WAAKH,KAAL,CAAWI,WAAX;AACH,KAJL,EAKKC,KALL,CAKWC,GAAG,IAAI;AACV,WAAKN,KAAL,CAAWI,WAAX;AACA,WAAKJ,KAAL,CAAWO,YAAX,CAAwB,MAAxB;AACH,KARL;AASH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAO,oBAAC,gBAAD;AAAkB,MAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAhBmC;;AAmBxC,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BF,EAAAA,MAAM,EAAEE,KAAK,CAACC,SAAN,CAAgBH;AADM,CAAL,CAA7B;;AAIA,MAAMI,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHZ,IAAAA,SAAS,EAAE,MAAM;AACb,aAAO,IAAIa,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,YAAGH,QAAQ,CAACnB,gBAAgB,CAACO,SAAjB,EAAD,CAAX,EAA0C;AACtCc,UAAAA,GAAG;AACN,SAFD,MAEK;AACDC,UAAAA,GAAG;AACN;AACJ,OANM,CAAP;AAOH;AATE,GAAP;AAWH,CAZD;;AAcApB,SAAS,CAACqB,SAAV,GAAsB;AAClBT,EAAAA,MAAM,EAAEhB,SAAS,CAAC0B,OAAV,CAAkB1B,SAAS,CAAC2B,MAA5B,EAAoCC,UAD1B;AAElBnB,EAAAA,SAAS,EAAET,SAAS,CAAC6B,IAAV,CAAeD,UAFR;AAGlBd,EAAAA,YAAY,EAAEd,SAAS,CAAC6B,IAAV,CAAeD,UAHX;AAIlBpB,EAAAA,WAAW,EAAER,SAAS,CAAC6B,IAAV,CAAeD,UAJV;AAKlBjB,EAAAA,WAAW,EAAEX,SAAS,CAAC6B,IAAV,CAAeD;AALV,CAAtB;AAOA,eAAezB,IAAI,CAACJ,OAAO,CAACkB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChB,SAA7C,CAAD,CAAnB","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DashboardWidgets from './DashboardWidgets';\r\nimport { dashboardActions } from '../../actions';\r\nimport { base } from '../../hocs';\r\n\r\nclass Dashboard extends React.Component {\r\n    async componentDidMount() {\r\n        this.props.showLoading();\r\n        this.props\r\n            .getOrders()\r\n            .then(() => {\r\n                this.props.hideLoading();\r\n            })\r\n            .catch(err => {\r\n                this.props.hideLoading();\r\n                this.props.showSnackBar('asda');\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return <DashboardWidgets orders={this.props.orders} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    orders: state.dashboard.orders,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getOrders: () => {\r\n            return new Promise((res, rej) => {\r\n                if(dispatch(dashboardActions.getOrders())){\r\n                    res();\r\n                }else{\r\n                    rej();\r\n                }\r\n            });\r\n        },\r\n    };\r\n};\r\n\r\nDashboard.propTypes = {\r\n    orders: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    getOrders: PropTypes.func.isRequired,\r\n    showSnackBar: PropTypes.func.isRequired,\r\n    showLoading: PropTypes.func.isRequired,\r\n    hideLoading: PropTypes.func.isRequired,\r\n};\r\nexport default base(connect(mapStateToProps, mapDispatchToProps)(Dashboard));\r\n"]},"metadata":{},"sourceType":"module"}