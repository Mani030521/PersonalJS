{"ast":null,"code":"import axios from 'axios';\nimport { HTTP_STATUS_CODE, NETWORK_ERROR } from '../constants';\n\nclass HttpClient {\n  constructor() {\n    this.handleError = error => {\n      const customError = {\n        message: null,\n        status: null\n      };\n\n      if (error.response) {\n        customError.status = error.response.status;\n        customError.message = error.response.statusText;\n\n        switch (error.response.status) {\n          case HTTP_STATUS_CODE.BadRequest || HTTP_STATUS_CODE.Unauthorized:\n            if (error.response.data.errors.lenght) {\n              // eslint-disable-next-line prefer-destructuring\n              customError.message = error.response.data.errors[0];\n            }\n\n            break;\n\n          case HTTP_STATUS_CODE.Forbidden:\n            this.redirectTo('/login');\n            break;\n\n          case HTTP_STATUS_CODE.NotFound:\n            this.redirectTo('/notfound');\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        customError.message = NETWORK_ERROR;\n      }\n\n      return Promise.reject(customError);\n    };\n\n    this.redirectTo = path => {\n      document.location = path;\n    };\n\n    // TODO: need to implement base url and version from enviornment variables\n    const client = axios.create({\n      baseURL: 'https://www.mocky.io/v2/',\n      responseType: 'json'\n    });\n    client.interceptors.request.use(this.handleRequest);\n    client.interceptors.response.use(this.handleSuccess, this.handleError);\n    this.client = client;\n    console.log(this.client);\n  }\n\n  handleRequest(config) {\n    // here we can add custom logic and headers in request e.g : Authorization header\n    return config;\n  }\n\n  handleSuccess(response) {\n    return response.data;\n  }\n\n  get(url) {\n    return this.client.get(url);\n  }\n\n  post(url, payload) {\n    return this.client.post(url, payload);\n  }\n\n  put(url, payload) {\n    return this.client.put(url, payload);\n  }\n\n}\n\nexport default new HttpClient();","map":{"version":3,"sources":["C:/Users/M1047144/Desktop/Node/React-ready/react-ready/src/utils/httpClient.js"],"names":["axios","HTTP_STATUS_CODE","NETWORK_ERROR","HttpClient","constructor","handleError","error","customError","message","status","response","statusText","BadRequest","Unauthorized","data","errors","lenght","Forbidden","redirectTo","NotFound","Promise","reject","path","document","location","client","create","baseURL","responseType","interceptors","request","use","handleRequest","handleSuccess","console","log","config","get","url","post","payload","put"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,cAAhD;;AACA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,GAAG;AAAA,SAqBdC,WArBc,GAqBAC,KAAK,IAAI;AACnB,YAAMC,WAAW,GAAG;AAChBC,QAAAA,OAAO,EAAE,IADO;AAEhBC,QAAAA,MAAM,EAAE;AAFQ,OAApB;;AAIA,UAAIH,KAAK,CAACI,QAAV,EAAoB;AAChBH,QAAAA,WAAW,CAACE,MAAZ,GAAqBH,KAAK,CAACI,QAAN,CAAeD,MAApC;AACAF,QAAAA,WAAW,CAACC,OAAZ,GAAsBF,KAAK,CAACI,QAAN,CAAeC,UAArC;;AACA,gBAAQL,KAAK,CAACI,QAAN,CAAeD,MAAvB;AACI,eAAKR,gBAAgB,CAACW,UAAjB,IACDX,gBAAgB,CAACY,YADrB;AAEI,gBAAIP,KAAK,CAACI,QAAN,CAAeI,IAAf,CAAoBC,MAApB,CAA2BC,MAA/B,EAAuC;AACnC;AACAT,cAAAA,WAAW,CAACC,OAAZ,GAAsBF,KAAK,CAACI,QAAN,CAAeI,IAAf,CAAoBC,MAApB,CAA2B,CAA3B,CAAtB;AACH;;AACD;;AACJ,eAAKd,gBAAgB,CAACgB,SAAtB;AACI,iBAAKC,UAAL,CAAgB,QAAhB;AACA;;AACJ,eAAKjB,gBAAgB,CAACkB,QAAtB;AACI,iBAAKD,UAAL,CAAgB,WAAhB;AACA;;AACJ;AACI;AAfR;AAiBH,OApBD,MAoBO;AACHX,QAAAA,WAAW,CAACC,OAAZ,GAAsBN,aAAtB;AACH;;AACD,aAAOkB,OAAO,CAACC,MAAR,CAAed,WAAf,CAAP;AACH,KAlDa;;AAAA,SAoDdW,UApDc,GAoDDI,IAAI,IAAI;AACjBC,MAAAA,QAAQ,CAACC,QAAT,GAAoBF,IAApB;AACH,KAtDa;;AACV;AACA,UAAMG,MAAM,GAAGzB,KAAK,CAAC0B,MAAN,CAAa;AACxBC,MAAAA,OAAO,EAAE,0BADe;AAExBC,MAAAA,YAAY,EAAE;AAFU,KAAb,CAAf;AAIAH,IAAAA,MAAM,CAACI,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CAAgC,KAAKC,aAArC;AACAP,IAAAA,MAAM,CAACI,YAAP,CAAoBnB,QAApB,CAA6BqB,GAA7B,CAAiC,KAAKE,aAAtC,EAAqD,KAAK5B,WAA1D;AACA,SAAKoB,MAAL,GAAcA,MAAd;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,MAAjB;AACH;;AAEDO,EAAAA,aAAa,CAACI,MAAD,EAAS;AAClB;AACA,WAAOA,MAAP;AACH;;AAEDH,EAAAA,aAAa,CAACvB,QAAD,EAAW;AACpB,WAAOA,QAAQ,CAACI,IAAhB;AACH;;AAqCDuB,EAAAA,GAAG,CAACC,GAAD,EAAM;AACL,WAAO,KAAKb,MAAL,CAAYY,GAAZ,CAAgBC,GAAhB,CAAP;AACH;;AAEDC,EAAAA,IAAI,CAACD,GAAD,EAAME,OAAN,EAAe;AACf,WAAO,KAAKf,MAAL,CAAYc,IAAZ,CAAiBD,GAAjB,EAAsBE,OAAtB,CAAP;AACH;;AAEDC,EAAAA,GAAG,CAACH,GAAD,EAAME,OAAN,EAAe;AACd,WAAO,KAAKf,MAAL,CAAYgB,GAAZ,CAAgBH,GAAhB,EAAqBE,OAArB,CAAP;AACH;;AAnEY;;AAsEjB,eAAe,IAAIrC,UAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport { HTTP_STATUS_CODE, NETWORK_ERROR } from '../constants';\r\nclass HttpClient {\r\n    constructor() {\r\n        // TODO: need to implement base url and version from enviornment variables\r\n        const client = axios.create({\r\n            baseURL: 'https://www.mocky.io/v2/',\r\n            responseType: 'json',\r\n        });\r\n        client.interceptors.request.use(this.handleRequest);\r\n        client.interceptors.response.use(this.handleSuccess, this.handleError);\r\n        this.client = client;\r\n        console.log(this.client)\r\n    }\r\n\r\n    handleRequest(config) {\r\n        // here we can add custom logic and headers in request e.g : Authorization header\r\n        return config;\r\n    }\r\n\r\n    handleSuccess(response) {\r\n        return response.data;\r\n    }\r\n\r\n    handleError = error => {\r\n        const customError = {\r\n            message: null,\r\n            status: null,\r\n        };\r\n        if (error.response) {\r\n            customError.status = error.response.status;\r\n            customError.message = error.response.statusText;\r\n            switch (error.response.status) {\r\n                case HTTP_STATUS_CODE.BadRequest ||\r\n                    HTTP_STATUS_CODE.Unauthorized:\r\n                    if (error.response.data.errors.lenght) {\r\n                        // eslint-disable-next-line prefer-destructuring\r\n                        customError.message = error.response.data.errors[0];\r\n                    }\r\n                    break;\r\n                case HTTP_STATUS_CODE.Forbidden:\r\n                    this.redirectTo('/login');\r\n                    break;\r\n                case HTTP_STATUS_CODE.NotFound:\r\n                    this.redirectTo('/notfound');\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            customError.message = NETWORK_ERROR;\r\n        }\r\n        return Promise.reject(customError);\r\n    };\r\n\r\n    redirectTo = path => {\r\n        document.location = path;\r\n    };\r\n\r\n    get(url) {\r\n        return this.client.get(url);\r\n    }\r\n\r\n    post(url, payload) {\r\n        return this.client.post(url, payload);\r\n    }\r\n\r\n    put(url, payload) {\r\n        return this.client.put(url, payload);\r\n    }\r\n}\r\n\r\nexport default new HttpClient();\r\n"]},"metadata":{},"sourceType":"module"}