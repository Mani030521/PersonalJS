{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M1047144\\\\Desktop\\\\Node\\\\React-ready\\\\react-ready\\\\src\\\\containers\\\\Dashboard\\\\Dashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DashboardWidgets from './DashboardWidgets';\nimport { dashboardActions } from '../../actions';\nimport { base } from '../../hocs';\n\nclass Dashboard extends React.Component {\n  async componentDidMount() {\n    console.log(this.props);\n\n    try {\n      await this.props.getOrders();\n    } catch (error) {\n      this.props.stopLoading();\n      this.props.showSnackBar(error.message);\n    } finally {\n      this.props.stopLoading();\n    }\n  }\n\n  render() {\n    return React.createElement(DashboardWidgets, {\n      orders: this.props.orders,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  orders: state.dashboard.orders\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getOrders: async () => {\n      await dispatch(dashboardActions.getOrders());\n    }\n  };\n};\n\nDashboard.propTypes = {\n  orders: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getOrders: PropTypes.func.isRequired,\n  showSnackBar: PropTypes.func.isRequired,\n  showLoading: PropTypes.func.isRequired,\n  hideLoading: PropTypes.func.isRequired\n};\nexport default base(connect(mapStateToProps, mapDispatchToProps)(Dashboard));","map":{"version":3,"sources":["C:/Users/M1047144/Desktop/Node/React-ready/react-ready/src/containers/Dashboard/Dashboard.js"],"names":["React","connect","PropTypes","DashboardWidgets","dashboardActions","base","Dashboard","Component","componentDidMount","console","log","props","getOrders","error","stopLoading","showSnackBar","message","render","orders","mapStateToProps","state","dashboard","mapDispatchToProps","dispatch","propTypes","arrayOf","object","isRequired","func","showLoading","hideLoading"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,IAAT,QAAqB,YAArB;;AAEA,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpC,QAAMC,iBAAN,GAA0B;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;;AACA,QAAI;AACA,YAAM,KAAKA,KAAL,CAAWC,SAAX,EAAN;AACH,KAFD,CAEE,OAAOC,KAAP,EAAc;AACZ,WAAKF,KAAL,CAAWG,WAAX;AACA,WAAKH,KAAL,CAAWI,YAAX,CAAwBF,KAAK,CAACG,OAA9B;AACH,KALD,SAKU;AACN,WAAKL,KAAL,CAAWG,WAAX;AACH;AACJ;;AAEDG,EAAAA,MAAM,GAAG;AACL,WAAO,oBAAC,gBAAD;AAAkB,MAAA,MAAM,EAAE,KAAKN,KAAL,CAAWO,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAfmC;;AAkBxC,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BF,EAAAA,MAAM,EAAEE,KAAK,CAACC,SAAN,CAAgBH;AADM,CAAL,CAA7B;;AAIA,MAAMI,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHX,IAAAA,SAAS,EAAE,YAAY;AACnB,YAAMW,QAAQ,CAACnB,gBAAgB,CAACQ,SAAjB,EAAD,CAAd;AACH;AAHE,GAAP;AAKH,CAND;;AAQAN,SAAS,CAACkB,SAAV,GAAsB;AAClBN,EAAAA,MAAM,EAAEhB,SAAS,CAACuB,OAAV,CAAkBvB,SAAS,CAACwB,MAA5B,EAAoCC,UAD1B;AAElBf,EAAAA,SAAS,EAAEV,SAAS,CAAC0B,IAAV,CAAeD,UAFR;AAGlBZ,EAAAA,YAAY,EAAEb,SAAS,CAAC0B,IAAV,CAAeD,UAHX;AAIlBE,EAAAA,WAAW,EAAE3B,SAAS,CAAC0B,IAAV,CAAeD,UAJV;AAKlBG,EAAAA,WAAW,EAAE5B,SAAS,CAAC0B,IAAV,CAAeD;AALV,CAAtB;AAOA,eAAetB,IAAI,CAACJ,OAAO,CAACkB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChB,SAA7C,CAAD,CAAnB","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DashboardWidgets from './DashboardWidgets';\r\nimport { dashboardActions } from '../../actions';\r\nimport { base } from '../../hocs';\r\n\r\nclass Dashboard extends React.Component {\r\n    async componentDidMount() {\r\n        console.log(this.props)\r\n        try {\r\n            await this.props.getOrders();\r\n        } catch (error) {\r\n            this.props.stopLoading();\r\n            this.props.showSnackBar(error.message);\r\n        } finally {\r\n            this.props.stopLoading();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <DashboardWidgets orders={this.props.orders} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    orders: state.dashboard.orders,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getOrders: async () => {\r\n            await dispatch(dashboardActions.getOrders());\r\n        },\r\n    };\r\n};\r\n\r\nDashboard.propTypes = {\r\n    orders: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    getOrders: PropTypes.func.isRequired,\r\n    showSnackBar: PropTypes.func.isRequired,\r\n    showLoading: PropTypes.func.isRequired,\r\n    hideLoading: PropTypes.func.isRequired,\r\n};\r\nexport default base(connect(mapStateToProps, mapDispatchToProps)(Dashboard));\r\n"]},"metadata":{},"sourceType":"module"}