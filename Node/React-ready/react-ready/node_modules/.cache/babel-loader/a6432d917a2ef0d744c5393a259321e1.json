{"ast":null,"code":"import { AUTH_TOKEN, TOKEN_EXPIRY } from '../constants';\n\nclass AuthProvider {\n  async login() {\n    try {\n      // un-comment the http call once integrated with actual login API\n      // const response = await httpClient.post('login', credentials);\n      // set token and token expiry in local storage or as per your approach\n      // localStorage.setItem(AUTH_TOKEN, response.result.token);\n      // localStorage.setItem(TOKEN_EXPIRY, response.result.tokenExpiry);\n      // genenating token 2 minute token expiry time\n      const tokenExpiry = this.getTokenFakeExpiryTime(2).toISOString();\n      localStorage.setItem(AUTH_TOKEN, 'token');\n      localStorage.setItem(TOKEN_EXPIRY, tokenExpiry);\n      return Promise.resolve();\n    } catch (error) {\n      return Promise.reject(error.message);\n    }\n  }\n\n  logout() {\n    localStorage.removeItem(AUTH_TOKEN);\n    localStorage.removeItem(TOKEN_EXPIRY);\n  }\n\n  refreshToken() {}\n\n  getTokenFakeExpiryTime(minutes) {\n    const dt = new Date();\n    return new Date(dt.setUTCMinutes(dt.getUTCMinutes() + minutes));\n  }\n\n}\n\nexport default new AuthProvider();","map":{"version":3,"sources":["C:/Users/M1047144/Desktop/Node/React-ready/react-ready/src/utils/authProvider.js"],"names":["AUTH_TOKEN","TOKEN_EXPIRY","AuthProvider","login","tokenExpiry","getTokenFakeExpiryTime","toISOString","localStorage","setItem","Promise","resolve","error","reject","message","logout","removeItem","refreshToken","minutes","dt","Date","setUTCMinutes","getUTCMinutes"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,cAAzC;;AAEA,MAAMC,YAAN,CAAmB;AACf,QAAMC,KAAN,GAAc;AACV,QAAI;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,YAAMC,WAAW,GAAG,KAAKC,sBAAL,CAA4B,CAA5B,EAA+BC,WAA/B,EAApB;AAEAC,MAAAA,YAAY,CAACC,OAAb,CAAqBR,UAArB,EAAiC,OAAjC;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqBP,YAArB,EAAmCG,WAAnC;AACA,aAAOK,OAAO,CAACC,OAAR,EAAP;AACH,KAdD,CAcE,OAAOC,KAAP,EAAc;AACZ,aAAOF,OAAO,CAACG,MAAR,CAAeD,KAAK,CAACE,OAArB,CAAP;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACLP,IAAAA,YAAY,CAACQ,UAAb,CAAwBf,UAAxB;AACAO,IAAAA,YAAY,CAACQ,UAAb,CAAwBd,YAAxB;AACH;;AAEDe,EAAAA,YAAY,GAAG,CAAE;;AAEjBX,EAAAA,sBAAsB,CAACY,OAAD,EAAU;AAC5B,UAAMC,EAAE,GAAG,IAAIC,IAAJ,EAAX;AACA,WAAO,IAAIA,IAAJ,CAASD,EAAE,CAACE,aAAH,CAAiBF,EAAE,CAACG,aAAH,KAAqBJ,OAAtC,CAAT,CAAP;AACH;;AA/Bc;;AAkCnB,eAAe,IAAIf,YAAJ,EAAf","sourcesContent":["import { AUTH_TOKEN, TOKEN_EXPIRY } from '../constants';\r\n\r\nclass AuthProvider {\r\n    async login() {\r\n        try {\r\n            // un-comment the http call once integrated with actual login API\r\n            // const response = await httpClient.post('login', credentials);\r\n            // set token and token expiry in local storage or as per your approach\r\n\r\n            // localStorage.setItem(AUTH_TOKEN, response.result.token);\r\n            // localStorage.setItem(TOKEN_EXPIRY, response.result.tokenExpiry);\r\n\r\n            // genenating token 2 minute token expiry time\r\n            const tokenExpiry = this.getTokenFakeExpiryTime(2).toISOString();\r\n\r\n            localStorage.setItem(AUTH_TOKEN, 'token');\r\n            localStorage.setItem(TOKEN_EXPIRY, tokenExpiry);\r\n            return Promise.resolve();\r\n        } catch (error) {\r\n            return Promise.reject(error.message);\r\n        }\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(AUTH_TOKEN);\r\n        localStorage.removeItem(TOKEN_EXPIRY);\r\n    }\r\n\r\n    refreshToken() {}\r\n\r\n    getTokenFakeExpiryTime(minutes) {\r\n        const dt = new Date();\r\n        return new Date(dt.setUTCMinutes(dt.getUTCMinutes() + minutes));\r\n    }\r\n}\r\n\r\nexport default new AuthProvider();\r\n"]},"metadata":{},"sourceType":"module"}