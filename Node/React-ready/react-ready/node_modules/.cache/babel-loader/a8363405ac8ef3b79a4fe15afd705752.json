{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M1047144\\\\Desktop\\\\Node\\\\React-ready\\\\react-ready\\\\src\\\\containers\\\\Product\\\\Product.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ProductList from './ProductList';\nimport { productActions } from '../../actions';\nimport { base } from '../../hocs';\n\nclass Product extends React.Component {\n  async componentDidMount() {\n    try {\n      this.props.showLoading();\n      await this.props.getProducts();\n    } catch (error) {\n      this.props.showSnackBar(error.message);\n    } finally {\n      this.props.hideLoading();\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(ProductList, {\n      rows: this.props.products,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  products: state.product.list\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getProducts: async () => {\n      await dispatch(productActions.getProducts());\n    }\n  };\n};\n\nProduct.propTypes = {\n  products: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getProducts: PropTypes.func.isRequired,\n  showSnackBar: PropTypes.func.isRequired,\n  showLoading: PropTypes.func.isRequired,\n  hideLoading: PropTypes.func.isRequired\n};\nexport default base(connect(mapStateToProps, mapDispatchToProps)(Product));","map":{"version":3,"sources":["C:/Users/M1047144/Desktop/Node/React-ready/react-ready/src/containers/Product/Product.js"],"names":["React","connect","PropTypes","ProductList","productActions","base","Product","Component","componentDidMount","props","showLoading","getProducts","error","showSnackBar","message","hideLoading","render","products","mapStateToProps","state","product","list","mapDispatchToProps","dispatch","propTypes","arrayOf","object","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,IAAT,QAAqB,YAArB;;AAEA,MAAMC,OAAN,SAAsBN,KAAK,CAACO,SAA5B,CAAsC;AAClC,QAAMC,iBAAN,GAA0B;AACtB,QAAI;AACA,WAAKC,KAAL,CAAWC,WAAX;AACA,YAAM,KAAKD,KAAL,CAAWE,WAAX,EAAN;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,WAAKH,KAAL,CAAWI,YAAX,CAAwBD,KAAK,CAACE,OAA9B;AACH,KALD,SAKU;AACN,WAAKL,KAAL,CAAWM,WAAX;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,0CACI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAE,KAAKP,KAAL,CAAWQ,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAlBiC;;AAqBtC,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BF,EAAAA,QAAQ,EAAEE,KAAK,CAACC,OAAN,CAAcC;AADM,CAAL,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHZ,IAAAA,WAAW,EAAE,YAAY;AACrB,YAAMY,QAAQ,CAACnB,cAAc,CAACO,WAAf,EAAD,CAAd;AACH;AAHE,GAAP;AAKH,CAND;;AAQAL,OAAO,CAACkB,SAAR,GAAoB;AAChBP,EAAAA,QAAQ,EAAEf,SAAS,CAACuB,OAAV,CAAkBvB,SAAS,CAACwB,MAA5B,EAAoCC,UAD9B;AAEhBhB,EAAAA,WAAW,EAAET,SAAS,CAAC0B,IAAV,CAAeD,UAFZ;AAGhBd,EAAAA,YAAY,EAAEX,SAAS,CAAC0B,IAAV,CAAeD,UAHb;AAIhBjB,EAAAA,WAAW,EAAER,SAAS,CAAC0B,IAAV,CAAeD,UAJZ;AAKhBZ,EAAAA,WAAW,EAAEb,SAAS,CAAC0B,IAAV,CAAeD;AALZ,CAApB;AAOA,eAAetB,IAAI,CAACJ,OAAO,CAACiB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ChB,OAA7C,CAAD,CAAnB","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport ProductList from './ProductList';\r\nimport { productActions } from '../../actions';\r\nimport { base } from '../../hocs';\r\n\r\nclass Product extends React.Component {\r\n    async componentDidMount() {\r\n        try {\r\n            this.props.showLoading();\r\n            await this.props.getProducts();\r\n        } catch (error) {\r\n            this.props.showSnackBar(error.message);\r\n        } finally {\r\n            this.props.hideLoading();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ProductList rows={this.props.products} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    products: state.product.list,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getProducts: async () => {\r\n            await dispatch(productActions.getProducts());\r\n        },\r\n    };\r\n};\r\n\r\nProduct.propTypes = {\r\n    products: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    getProducts: PropTypes.func.isRequired,\r\n    showSnackBar: PropTypes.func.isRequired,\r\n    showLoading: PropTypes.func.isRequired,\r\n    hideLoading: PropTypes.func.isRequired,\r\n};\r\nexport default base(connect(mapStateToProps, mapDispatchToProps)(Product));\r\n"]},"metadata":{},"sourceType":"module"}